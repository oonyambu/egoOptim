subset(select=-V2) |>
aggregate(.~V1, mean)|>
tidyr::pivot_longer(!V1,
names_transform = list(name=~5*(readr::parse_number(.x)-3)))
library(tidyverse)
read.table("results/branin_10.txt")|>
subset(select=-V2) |>
aggregate(.~V1, mean)|>
tidyr::pivot_longer(!V1,
names_transform = list(name=~5*(readr::parse_number(.x)-3)))|>
read.table("results/branin_10.txt")|>
subset(select=-V2) |>
aggregate(.~V1, mean)|>
tidyr::pivot_longer(!V1,
names_transform = list(name=~5*(readr::parse_number(.x)-3)))|>
ggplot(aes(name, value, col = V1))
read.table("results/branin_10.txt")|>
subset(select=-V2) |>
aggregate(.~V1, mean)|>
tidyr::pivot_longer(!V1,
names_transform = list(name=~5*(readr::parse_number(.x)-3)))|>
ggplot(aes(name, value, col = V1)) +
geom_point()
read.table("results/branin_10.txt")|>
subset(select=-V2) |>
aggregate(.~V1, mean)|>
tidyr::pivot_longer(!V1,
names_transform = list(name=~5*(readr::parse_number(.x)-3)),
values_transform = log10)|>
ggplot(aes(name, value, col = V1)) +
geom_point()
read.table("results/branin_10.txt")|>
subset(select=-V2) |>
aggregate(.~V1, mean)|>
tidyr::pivot_longer(!V1,
names_transform = list(name=~5*(readr::parse_number(.x)-3)),
values_transform = log10)|>
ggplot(aes(name, value, col = V1)) +
geom_line()
library(egoOptim)
library(parallel)
compare <- function(fun, lower, upper, ..., reps = 1,
control = list(), maximize = FALSE,
file = NULL, overwrite = FALSE){
if(missing(lower)) {
dom <- domain(deparse(substitute(fun)))
lower <- dom$lower
upper <- dom$upper
control$trueglobal <- dom$opt$f
}
control <- egoOptim:::control_pars(control, lower)
if(is.null(control$budget)) control$budget <- 50
if(is.character(fun)) fun <- match.fun(fun)
controlList <- list(TREGO = modifyList(control,
list(basicEGO = TRUE, method = 'TREGO')),
EGO = modifyList(control,
list(basicEGO = TRUE, method = 'fastEGO')),
RSO = modifyList(control,
list(basicEGO = FALSE, method = 'fastEGO')))
bounds <- data.frame(rbind(lower, upper))
ncores <- if(.Platform$OS.type=='windows') 1 else detectCores()
.fun <- function(x) (-1)^maximize*fun(x, ...)
f <- \(ctr, X, y) optimize_fun(.fun, lower, upper, X = X,
y = y, control = ctr)$env
errfun <- \(x)  rbind(x$EGO$error_init, sapply(x, getElement, "errors"))
timefun <- \(x) sapply(x, \(y)y$time_taken[[1]])
return(controlList)
if(!is.null(file)){
time_file <- sub("(.(?:txt|csv))?$", "_time\\1", file)
if(file.exists(file) && overwrite) {
file.remove(c(file, time_file))
}
cat(strrep("#", 80), "\n",
paste(names(controlList), collapse = ' '),'\n',
sep="",
file = time_file, append = TRUE)
cat(strrep("#", 80),
"\n# nsteps: ", control$nsteps,
" rho: ", control$rho,
" Lower Bound: (",toString(lower), ')',
" Upper Bound: (",toString(upper), ')',
" Budget: ", control$budget,"\n",
strrep("#", 80), "\n",
file = file, append = TRUE, sep="")
}
run1 <- function(i){
cat("\n\nITERATION", i,"\n")
X <- lhs::maximinLHS(control$n, length(lower))
X <- mcmapply(scales::rescale, data.frame(X), bounds, mc.cores = ncores)
y <- apply(X, 1, fun)
Envs <- mclapply(controlList, f, X,y, mc.cores = ncores)
results <- list(errors = errfun(Envs), time = timefun(Envs))
if(!is.null(file)){
write.table(cbind(it = i,t(results$errors)),
file = file, append = TRUE,
col.names = FALSE)
write.table(t(results$time), file = time_file,
row.names = FALSE, append = TRUE,
col.names = FALSE)
}
#structure(results, class='egoOptimList', a=Envs)
results
}
results <- mclapply(seq.int(reps), run1, mc.cores = ncores)
res <- Reduce(\(x,y)Map("+", x, y), results)
res$errors <- res$errors/reps
res
}
control <- list(n =10, budget = 70,
kmcontrol = list(multistart = 5,   covtype = 'matern5_2'))
a <- compare(branin, reps = 10, control = control,
file = 'results/branin_101.txt', overwrite = TRUE)
a
Compare
compare
compare(branin, reps = 10, control = control,
file = 'results/branin_101.txt', overwrite = TRUE)
compare <- function(fun, lower, upper, ..., reps = 1,
control = list(), maximize = FALSE,
file = NULL, overwrite = FALSE){
if(missing(lower)) {
dom <- domain(deparse(substitute(fun)))
lower <- dom$lower
upper <- dom$upper
control$trueglobal <- dom$opt$f
}
control <- egoOptim:::control_pars(control, lower)
if(is.null(control$budget)) control$budget <- 50
if(is.character(fun)) fun <- match.fun(fun)
controlList <- list(TREGO = modifyList(control,
list(basicEGO = TRUE, method = 'TREGO')),
EGO = modifyList(control,
list(basicEGO = TRUE, method = 'fastEGO')),
RSO = modifyList(control,
list(basicEGO = FALSE, method = 'fastEGO')))
bounds <- data.frame(rbind(lower, upper))
ncores <- if(.Platform$OS.type=='windows') 1 else detectCores()
.fun <- function(x) (-1)^maximize*fun(x, ...)
f <- \(ctr, X, y) optimize_fun(.fun, lower, upper, X = X,
y = y, control = ctr)$env
errfun <- \(x)  rbind(x$EGO$error_init, sapply(x, getElement, "errors"))
timefun <- \(x) sapply(x, \(y)y$time_taken[[1]])
#return(controlList)
if(!is.null(file)){
time_file <- sub("(.(?:txt|csv))?$", "_time\\1", file)
if(file.exists(file) && overwrite) {
file.remove(c(file, time_file))
}
cat(strrep("#", 80), "\n",
paste(names(controlList), collapse = ' '),'\n',
sep="",
file = time_file, append = TRUE)
cat(strrep("#", 80),
"\n# nsteps: ", control$nsteps,
" rho: ", control$rho,
" Lower Bound: (",toString(lower), ')',
" Upper Bound: (",toString(upper), ')',
" Budget: ", control$budget,"\n",
strrep("#", 80), "\n",
file = file, append = TRUE, sep="")
}
run1 <- function(i){
cat("\n\nITERATION", i,"\n")
X <- lhs::maximinLHS(control$n, length(lower))
X <- mcmapply(scales::rescale, data.frame(X), bounds, mc.cores = ncores)
y <- apply(X, 1, fun)
Envs <- mclapply(controlList, f, X,y, mc.cores = ncores)
results <- list(errors = errfun(Envs), time = timefun(Envs))
if(!is.null(file)){
write.table(cbind(it = i,t(results$errors)),
file = file, append = TRUE,
col.names = FALSE)
write.table(t(results$time), file = time_file,
row.names = FALSE, append = TRUE,
col.names = FALSE)
}
#structure(results, class='egoOptimList', a=Envs)
results
}
results <- mclapply(seq.int(reps), run1, mc.cores = ncores)
res <- Reduce(\(x,y)Map("+", x, y), results)
res$errors <- res$errors/reps
res
}
control <- list(n =10, budget = 70,
kmcontrol = list(multistart = 5,   covtype = 'matern5_2'))
a <- compare(branin, reps = 10, control = control,
file = 'results/branin_101.txt', overwrite = TRUE)
a
read.table("results/branin_101.txt")|>
subset(select=-V2) |>
aggregate(.~V1, mean)|>
tidyr::pivot_longer(!V1,
names_transform = list(name=~5*(readr::parse_number(.x)-3)),
values_transform = log10)|>
ggplot(aes(name, value, col = V1)) +
geom_line()
read.table("results/branin_101.txt")|>
subset(select=-V2) |>
aggregate(.~V1, mean)|>
tidyr::pivot_longer(!V1,
names_transform = list(name=~5*(readr::parse_number(.x)-3)),
values_transform = log10)|>
ggplot(aes(name, value, col = V1)) +
geom_line(linewidth=2)
read.table("results/branin_101.txt")|>
subset(select=-V2) |>
aggregate(.~V1, mean)|>
tidyr::pivot_longer(!V1,
names_transform = list(name=~5*(readr::parse_number(.x)-3)),
values_transform = log10)|>
ggplot(aes(name, value, col = V1)) +
geom_line(linewidth=1.1)
read.table("results/branin_101.txt")|>
subset(select=-V2) |>
aggregate(.~V1, mean)|>
tidyr::pivot_longer(!V1,
names_transform = list(name=~5*(readr::parse_number(.x)-3)),
values_transform = log10)|>
ggplot(aes(name, value, col = V1)) +
geom_line(linewidth=1)
a
log(a$errors,10)
d <- compare(branin, reps = 10, control = control,
file = 'results/branin_101.txt', overwrite = FALSE)
read.table("results/branin_101.txt")|>
subset(select=-V2) |>
aggregate(.~V1, mean)|>
tidyr::pivot_longer(!V1,
names_transform = list(name=~5*(readr::parse_number(.x)-3)),
values_transform = log10)|>
ggplot(aes(name, value, col = V1)) +
geom_line(linewidth=1)
read.table("results/hart3_10.txt")
knitr::opts_chunk$set(echo = TRUE)
read.table("results/hart3_10.txt")|>
subset(select=-V2) |>
aggregate(.~V1, mean)|>
tidyr::pivot_longer(!V1,
names_transform = list(name=~5*(readr::parse_number(.x)-3)),
values_transform = log10)|>
ggplot(aes(name, value, col = V1)) +
geom_line(linewidth=1)
read.table("results/hart3_10.txt")|>
subset(select=-V2) |>
aggregate(.~V1, mean)|>
tidyr::pivot_longer(!V1,
names_transform = list(name=~5*(readr::parse_number(.x)-3)),
values_transform = log10)|>
ggplot(aes(name, value, col = V1)) +
geom_line(linewidth=1) +
scale_x_continuous(label=~.x+10)
read.table("results/hart3_10.txt")|>
subset(select=-V2) |>
aggregate(.~V1, mean)|>
tidyr::pivot_longer(!V1,
names_transform = list(name=~5*(readr::parse_number(.x)-3)),
values_transform = log10)|>
ggplot(aes(name, value, col = V1)) +
geom_line(linewidth=1) +
scale_x_continuous(label=~.x+20)
library(tidyverse)
read.table("results/branin_101.txt")|>
subset(select=-V2) |>
aggregate(.~V1, mean)|>
tidyr::pivot_longer(!V1,
names_transform = list(name=~5*(readr::parse_number(.x)-3)),
values_transform = log10)|>
ggplot(aes(name, value, col = V1)) +
geom_line(linewidth=1) +
scale_x_continuous(label=~.x+20)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE )
library(tidyverse)
read.table("results/branin_10.txt")|>
subset(select=-V2) |>
aggregate(.~V1, mean)|>
tidyr::pivot_longer(!V1,
names_transform = list(name=~5*(readr::parse_number(.x)-3)),
values_transform = log10)|>
ggplot(aes(name, value, col = V1)) +
geom_line(linewidth=1) +
scale_x_continuous(label=~.x+20)
x <- c(0.5, 0.5, 0.1)
y <- c(1, 1e-4, 0.001)
mean(x)
mean(y)
y <- c(1, 1e-4, 0.01)
mean(y)
y <- c(1, 1e-4, 0.1)
mean(y)
mean(log(x))
mean(log(y))
log(mean(x))
log(mean(y))
dom<- domain("hart3")
optimize_fun(hart3, dom$lower, dom$upper, control = list(plot=T))
optimize_fun(hart3, dom$lower, dom$upper, control = list(plot=T, dimplot=2:3))
optimize_fun(hart3, dom$lower, dom$upper, control = list(plot=T, dimplot=2:3, trueglobal=dom$opt$f))
x
read.table("results/hart3_10.txt")|>
subset(select=-V2) |>
mutate(across(!V1, log10))|>
aggregate(.~V1, mean)|>
tidyr::pivot_longer(!V1,
names_transform = list(name=~5*(readr::parse_number(.x)-3)))|>
ggplot(aes(name, value, col = V1)) +
geom_line(linewidth=1) +
scale_x_continuous(label=~.x+20)
read.table("results/hart3_10.txt")|>
subset(select=-V2) |>
mutate(across(!V1, log10))|>
aggregate(.~V1, mean)|>
tidyr::pivot_longer(!V1,
names_transform = list(name=~5*(readr::parse_number(.x)-3)))|>
ggplot(aes(name, value, col = V1)) +
geom_line(linewidth=1) +
scale_x_continuous(label=~.x+20)
optim
install.packages('pryr')
pryr::show_c_source('.External(C_optim)')
pryr::show_c_source('.External(C_optim(x))')
?pryr::show_c_source('.External(C_optim(x))')
pryr::show_c_source('.External2(C_optim(x))')
pryr::show_c_source('.Internal(C_optim(x))')
pryr::show_c_source('.Internal("+")')
pryr::show_c_source('.Internal(1+1)')
pryr::show_c_source('.Primitive(1+1)')
pryr::show_c_source(.External2(C_optim(x)))
pryr::show_c_source(.External\(C_optim(x)))
pryr::show_c_source(Internal(C_optim(x)))
pryr::show_c_source(.Internal(C_optim(x)))
fix(optim)
optimize
.External2
load("C:/Users/oonya/Downloads/apparelDynCov copy.rda")
#load("~/Desktop/apparelDynCov.rda")
#load("~/Desktop/apparelTrans.rda")
load("C:/Users/oonya/Downloads/apparelDynCov copy.rda")
load("C:/Users/oonya/Downloads/apparelTrans copy.rda")
DynCov <- data.table::copy(apparelDynCov)[, Cov.Date := as.Date(Cov.Date)]
TransLog <- data.table::copy(apparelTrans)[, Date := as.Date(Date)]
TransLog
Translog[, as.numeric(Date - Date[0], 'weeks'), by = Id]
TransLog[, as.numeric(Date - Date[0], 'weeks'), by = Id]
TransLog[ Date := as.Date(Date),
][, as.numeric(Date - Date[0], 'weeks'), by = Id]
TransLog[, Date := as.Date(Date),
][, as.numeric(Date - Date[0], 'weeks'), by = Id]
TransLog[, Date := as.Date(Date)
][, as.numeric(Date - Date[0], 'weeks'), by = Id]
TransLog[, Date := as.Date(Date)]
TransLog[, Date := as.Date(Date)][]
TransLog[, Date := as.Date(Date)
][, as.numeric(Date - Date[1], 'weeks'), by = Id]
TransLog[, Date := as.Date(Date)
][, as.numeric(Date - Date[1]), by = Id]
DynCov
DynCov <- data.table::copy(apparelDynCov)[, Cov.Date := as.Date(Cov.Date)]
TransLog <- data.table::copy(apparelTrans)[, Date := as.Date(Date)]
DynCov[, data.table::first(Cov.Date), Id]
Translog[DynCov[, data.table::first(Cov.Date), Id], on = .(Id = Id)]
TransLog[DynCov[, data.table::first(Cov.Date), Id], on = .(Id = Id)]
TransLog[DynCov[, data.table::first(Cov.Date), Id], on = .(Id = Id), Date - V1]
TransLog[DynCov[, data.table::first(Cov.Date), Id], on = .(Id = Id), .(Date - V1)]
TransLog[DynCov[, data.table::first(Cov.Date), Id], on = .(Id = Id), .(as.numeric(Date - V1,'weeks'))]
TransLog[DynCov[, data.table::first(Cov.Date), Id], on = .(Id = Id), .(t=as.numeric(Date - V1,'weeks'))]
TransLog[,TransLog[DynCov[, data.table::first(Cov.Date), Id], on = .(Id = Id), .(t=as.numeric(Date - V1,'weeks'))]]
TransLog[,.SD[DynCov[, data.table::first(Cov.Date), Id], on = .(Id = Id), .(t=as.numeric(Date - V1,'weeks'))]]
TransLog[,.SD[DynCov[, data.table::first(Cov.Date), Id], on = .(Id = Id), as.numeric(Date - V1,'weeks')]]
TransLog[,.(t=.SD[DynCov[, data.table::first(Cov.Date), Id], on = .(Id = Id), as.numeric(Date - V1,'weeks'))]]
TransLog[,.(t=.SD[DynCov[, data.table::first(Cov.Date), Id], on = .(Id = Id), as.numeric(Date - V1,'weeks')]]
TransLog[,.SD[DynCov[, data.table::first(Cov.Date), Id], on = .(Id = Id), as.numeric(Date - V1,'weeks')]]
TransLog[,t:=.SD[DynCov[, data.table::first(Cov.Date), Id], on = .(Id = Id), as.numeric(Date - V1,'weeks')]]
TransLog[,t:=.SD[DynCov[, data.table::first(Cov.Date), Id], on = .(Id = Id), as.numeric(Date - V1,'weeks')]][]
library(tidyverse)
install.packages('prioritize')
search()
library(data.table)
first
first()
TransLog[,t:=.SD[DynCov[, data.table::first(Cov.Date), Id], on = .(Id = Id), as.numeric(Date - V1,'weeks')]][]
TransLog[,t:=.SD[DynCov[, first(Cov.Date), Id], on = .(Id = Id), as.numeric(Date - V1,'weeks')]][]
TransLog[, t:=.SD[DynCov[, first(Cov.Date), Id], on = .(Id = Id),
as.numeric(Date - V1,'weeks')]
# changed from using base functions head and tail to using
# first and last functions from data.table
# ie head(x, 1) is same as first(x)
# tail(x,1) is the same as last(x)
][, .(t0 = first(t), tx = last(t),  x = length(t)-1, t=.(ceiling(t))), by = Id                                                     # x = number of transactions, redefine t=ceil(t) (needed for further calc/matching TransLog to DynCov)
]
TransLog[,t:=.SD[DynCov[, first(Cov.Date), Id], on = .(Id = Id), as.numeric(Date - V1,'weeks')]][]
TransLog[, t:=.SD[DynCov[, first(Cov.Date), Id], on = .(Id = Id),
as.numeric(Date - V1,'weeks')]
# changed from using base functions head and tail to using
# first and last functions from data.table
# ie head(x, 1) is same as first(x)
# tail(x,1) is the same as last(x)
][, .(t0 = first(t), tx = last(t),  x = .N - 1, t=.(ceiling(t))), by = Id                                                     # x = number of transactions, redefine t=ceil(t) (needed for further calc/matching TransLog to DynCov)
]
params <- c(r = 1, alpha = 1, a = 1, b = 1,
tau = 1.1, beta1 = 1, beta2 = 1, beta3 = 1)
Translog[DynCov[, data.table::first(Cov.Date), Id], on = .(Id = Id)]
TransLog[DynCov[, data.table::first(Cov.Date), Id], on = .(Id = Id)]
Translog[DynCov, on = .(Id = Id)]
TransLog[DynCov, on = .(Id = Id)]
DynCov
TransLog
DynCov[, .(Id,
At = c(exp(crossprod(t(.SD[,-(1:2)]), params[-(1:5)]))),                                        # At=e^(beta1*cov1+beta2*cov2+...) for each week
t_1 = as.numeric(Cov.Date - Cov.Date[1], 'weeks'))                                              # t_1 week count in DynCov, used to match to t in TransLogg
][ ,list(T = max(t_1), At = .(At),                                                                   # T period of observation, defined by last entry in DynCov, puts Ats into list
s_sum = .(cumsum(At)), t_1 = .(t_1)), Id]
cbs_fun <- function(params,DynCov,TransLog){
# Hat to change the first line of code, as it was hard-coded
# Used left-join in case each person had different start dates in the
# DynCov database.
# Previous code:
#   TransLog[, .(Id, t= as.numeric(Date - DynCov[1,Cov.Date],'weeks'))][...]
TransLog[, t:=.SD[DynCov[, first(Cov.Date), Id], on = .(Id = Id),
as.numeric(Date - V1,'weeks')]
# changed from using base functions head and tail to using
# first and last functions from data.table
# ie head(x, 1) is same as first(x)
# tail(x,1) is the same as last(x)
][, .(t0 = first(t), tx = last(t),  x = .N - 1, t=.(ceiling(t))), by = Id                                                     # x = number of transactions, redefine t=ceil(t) (needed for further calc/matching TransLog to DynCov)
][, tx_tau := floor(tx/params['tau']), Id                                                            # tx_tau = floor(tx_tau)
][DynCov[, .(Id,
At = c(exp(crossprod(t(.SD[,-(1:2)]), params[-(1:5)]))),                                        # At=e^(beta1*cov1+beta2*cov2+...) for each week
t_1 = as.numeric(Cov.Date - Cov.Date[1], 'weeks'))                                              # t_1 week count in DynCov, used to match to t in TransLogg
][ ,list(T = max(t_1), At = .(At),                                                                   # T period of observation, defined by last entry in DynCov, puts Ats into list
s_sum = .(cumsum(At)), t_1 = .(t_1)), Id]                                                   # cumulative sum of Ats by week
,on = 'Id'
][, j := floor(T/params['tau']) - tx_tau, Id                                                         # number of death opportunities between tx and T
][, PIAt := prod(unlist(At)[match(unlist(t),unlist(t_1))][-1]), Id                                   # product of A(t)s at times of repeat purchase
][, CT0 := s_sum[[1]][ceiling(t0)] + (t0%%1) * At[[1]][t0%/%1 + 2], Id                               # sum of A(t)s from 0 to t0 (time of initial purchase) TK!TT!KTK!!!is this hardcoaded?
][, num := .(.((tx_tau + seq_len(j)) * params['tau'])), Id                                           # we will take c(num)for every death opportunity between tx and T
][, m :=.(.(ceiling(num[[1]]))), Id                                                                  # ceil(num) for indexing
][, Ct := .(.(unlist(s_sum)[m[[1]]] +                                                                # Covariate effect present through different possibilities of time alive
(num[[1]] %% 1) * At[[1]][m[[1]] + 1])), Id
][, CT := sum(unlist(At)), Id                                                                        # Covariate effect from t=0 to T
][, common := log(PIAt)+lgamma(params['r'] + x)+ params['r']*log(params['alpha'])-lgamma(params['r'])-lbeta(params['a'],params['b'])
][, live := (CT - CT0 + params['alpha'])^(-params['r']-x)* beta(params['a'],params['b']+floor(T/params['tau']))
][, die := sum((Ct[[1]] - CT0 + params['alpha'])^(-params['r'] - x) *
beta(params['a'] + 1, params['b'] + tx_tau + seq_len(j) - 1)),   Id
][, LL := common+log(pmax(die + live, .Machine$double.xmin))
][, P_alive := live/(live+die)
][, c('t_1', 't', 'm', 'At', 'num','die','common','live','tx_tau') :=NULL][]
}
cbs(params, DynCov, TransLog)
cbs_fun(params, DynCov, TransLog)
set.seed(1)
At <- sample(10)
num <- floor(t_star/params['tau'] +  seq_along(At)) * params['tau'] - t_star
res <- c(0.7 * At[1],
At[1] + 0.8 * At[2],
At[[1]] + At[[2]] + 0.9*At[[3]],
At[[1]] + At[[2]] + At[[3]] + At[[4]],
At[[1]] + At[[2]] + At[[3]] + At[[4]] + At[[5]] + 0.1 * At[[6]],
sum(At[1:6]) + 0.2* At[7],
sum(At[1:7]) + 0.3* At[8],
sum(At[1:8]) + 0.4* At[9],
sum(At[1:9]) + 0.5* At[10],
sum(At[1:10]) + 0.6* At[11]
)
res
num()
num
?`package-pillar`
??`package-pillar`
t_star <- 39
train_dyncov <- DynCov[rowid(Id)<=t_star]
test_dyncov <- DynCov[rowid(Id)>t_star]
TransLog_train <- TransLog[Date <= train_dyncov[.N,Cov.Date]]
TransLog_test <- TransLog[Date > train_dyncov[.N,Cov.Date]]
x_star = TransLog_test[,.N, Id][TransLog[,first(Id),Id], on='Id',.(Id,x=fcoalesce(N,0L))]
t_tau <- floor(t_star / params['tau'])
test_dyncov[,.(Id,
At = c(exp(crossprod(t(.SD[,-(1:2)]), params[-(1:5)]))),
t_1 = t_tau + rowid(Id))
][, list(At = .(At),
s_sum = .(cumsum(At)), t_1 = .(t_1)), Id]
cov(iris[-5])
reticulate::repl_python()
r.iris
r.iris.drop(columns='Species')
r.iris.drop(columns='Species').cov()
r.iris.drop(columns='Species').cov().to_json
r.iris.drop(columns='Species').cov().to_json()
r.iris.drop(columns='Species').cov().values
r.iris.drop(columns='Species').cov().values.to_list()
r.iris.drop(columns='Species').cov().values.to_list
r.iris.drop(columns='Species').cov().values
r.iris.drop(columns='Species')
r.iris.drop(columns='Species').cov()
r.iris.drop(columns='Species').cov().iterrows
r.iris.drop(columns='Species').cov().iterrows()
list(r.iris.drop(columns='Species').cov().iterrows())
list(r.iris.drop(columns='Species').cov().iteritems())
a=r.iris.drop(columns='Species').cov()
a.itertuples
a.itertuples()
list(a.itertuples())
a.
a.to_string
a.to_string()
a.to_numpy
a.to_numpy()
list(a.to_numpy())
exit
cov(iris[-5])
do.call(paste, c(sep = ',', data.frame(cov(iris[-5]))))
paste("{",do.call(paste, c(sep = ',', data.frame(cov(iris[-5])))), collapse = "},")
