if(maximize & is.null(optimal)) optimal <- -1
res <- setNames(vector('list', 3), c('RSO', 'EGO', 'TREGO'))
for(i in seq_len(reps)){
X <- lhs::maximinLHS(5*length(low), length(low))
X1 <- mapply(scales::rescale, data.frame(X),data.frame(rbind(low, up)))
y1 <- apply(X1, 1, function(x) (-1)^(maximize)*fun(x, ...))
cat("RSO ITERATION:", i, "\n")
res[['RSO']][[i]] <- opt_fun1(fun, low, up,...,
X = X1,y=y1,
budget = budget,
maximize = maximize,
trueglobal = optimal,
nsteps = nsteps,
do_maxit = TRUE,basicEGO = FALSE)
cat("EGO ITERATION:", i, "\n")
res[['EGO']][[i]] <- opt_fun1(fun, low, up,..., X = X1, y=y1,
budget = budget,
maximize = maximize,
nsteps = nsteps,
trueglobal = optimal,
do_maxit = TRUE,basicEGO = TRUE)
cat("TREGO ITERATION:", i, "\n")
res[['TREGO']][[i]] <- opt_fun1(fun, low, up,...,X = X1,y=y1,
trueglobal = optimal,
maximize = maximize,
budget = budget,
nsteps = nsteps,
do_maxit = TRUE,basicEGO = TRUE,
method = 'TREGO')
}
# res <- list(RSO = fn(opt_fun1(fun, low, up,...,
#                        X = X1,y=y1,
#                        budget = budget,
#                        maximize = maximize,
#                        trueglobal = optimal,
#                        nsteps = nsteps,
#                        do_maxit = TRUE,basicEGO = FALSE), reps),
#      EGO = fn(opt_fun1(fun, low, up,..., X = X1, y=y1,
#                        budget = budget,
#                        maximize = maximize,
#                        nsteps = nsteps,
#                        trueglobal = optimal,
#                        do_maxit = TRUE,basicEGO = TRUE), reps),
#      TREGO = fn(opt_fun1(fun, low, up,...,X = X1,y=y1,
#                          trueglobal = optimal,
#                          maximize = maximize,
#                          budget = budget,
#                          nsteps = nsteps,
#                          do_maxit = TRUE,basicEGO = TRUE,
#                          method = 'TREGO'), reps))
r <- lapply(res, \(x){
vals <- sapply(x, getElement, 'errors')
vals <- if(maximize) 1- vals else log10(vals)
y <- data.frame(t(apply(vals, 1,
\(y)c(mean = mean(y), sd = sd(y)))))
y})
d <- transform(array2DF(structure(r, dim = 3)), point = 5*seq(0,nrow(r[[1]])-1))
p <- ggplot(d, aes(x = point, mean, color = Var1))+
geom_point() +
geom_line(linewidth = 1) +
geom_errorbar(aes(ymax = (if(maximize)pmin(mean + sd,1) else mean+sd),
ymin =(if(maximize) pmax(mean - sd, 0) else mean - sd)),
linewidth = 1, width = 1, alpha=0.5) +
labs(color = 'Method') +
ylab(if(maximize)'accuracy' else bquote(Log[10]* ' Loss')) +
xlab('m added points')
list(res=res, plot = p)
}
method_compare <- function(fun,low, up, ..., budget = 50, p = NULL,
maximize = FALSE, reps = 20L, nsteps = 5){
library(ggplot2)
optimal <- NULL
if(missing(low)){
dom <- egoOptim::domain(fun)
fun <- getFromNamespace(fun, 'egoOptim')
if(is.function(dom)){
if(is.null(p)) stop('the dimension `p` must be provided for ', f)
else dom <- dom(p)
}
optimal <- dom$opt$f
low <- dom$low
up <- dom$up
}
if(maximize & is.null(optimal)) optimal <- -1
res <- setNames(vector('list', 3), c('RSO', 'EGO', 'TREGO'))
for(i in seq_len(reps)){
X <- lhs::maximinLHS(5*length(low), length(low))
X1 <- mapply(scales::rescale, data.frame(X),data.frame(rbind(low, up)))
y1 <- apply(X1, 1, function(x) (-1)^(maximize)*fun(x, ...))
cat("RSO ITERATION:", i, "\n")
res[['RSO']][[i]] <- opt_fun1(fun, low, up,...,
X = X1,y=y1,
budget = budget,
maximize = maximize,
trueglobal = optimal,
nsteps = nsteps,
do_maxit = TRUE,basicEGO = FALSE)
cat("EGO ITERATION:", i, "\n")
res[['EGO']][[i]] <- opt_fun1(fun, low, up,..., X = X1, y=y1,
budget = budget,
maximize = maximize,
nsteps = nsteps,
trueglobal = optimal,
do_maxit = TRUE,basicEGO = TRUE)
cat("TREGO ITERATION:", i, "\n")
res[['TREGO']][[i]] <- opt_fun1(fun, low, up,...,X = X1,y=y1,
trueglobal = optimal,
maximize = maximize,
budget = budget,
nsteps = nsteps,
do_maxit = TRUE,basicEGO = TRUE,
method = 'TREGO')
}
# res <- list(RSO = fn(opt_fun1(fun, low, up,...,
#                        X = X1,y=y1,
#                        budget = budget,
#                        maximize = maximize,
#                        trueglobal = optimal,
#                        nsteps = nsteps,
#                        do_maxit = TRUE,basicEGO = FALSE), reps),
#      EGO = fn(opt_fun1(fun, low, up,..., X = X1, y=y1,
#                        budget = budget,
#                        maximize = maximize,
#                        nsteps = nsteps,
#                        trueglobal = optimal,
#                        do_maxit = TRUE,basicEGO = TRUE), reps),
#      TREGO = fn(opt_fun1(fun, low, up,...,X = X1,y=y1,
#                          trueglobal = optimal,
#                          maximize = maximize,
#                          budget = budget,
#                          nsteps = nsteps,
#                          do_maxit = TRUE,basicEGO = TRUE,
#                          method = 'TREGO'), reps))
r <- lapply(res, \(x){
vals <- sapply(x, getElement, 'errors')
vals <- if(maximize) 1- vals else log10(vals)
y <- data.frame(t(apply(vals, 1,
\(y)c(mean = mean(y), sd = sd(y)))))
y})
d <- transform(array2DF(structure(r, dim = 3)), point = 5*seq(0,nrow(r[[1]])-1))
p <- ggplot(d, aes(x = point, mean, color = Var1))+
geom_point() +
geom_line(linewidth = 1) +
geom_errorbar(aes(ymax = (if(maximize)pmin(mean + sd,1) else mean+sd),
ymin =(if(maximize) pmax(mean - sd, 0) else mean - sd)),
linewidth = 1, width = 1, alpha=0.5) +
labs(color = 'Method') +
ylab(if(maximize)'accuracy' else bquote(Log[10]* ' Loss')) +
xlab('m added points')
list(res=res, plot = p)
}
branin_results <- method_compare('branin', budget = 35)
branin_results <- method_compare('branin', budget = 35,reps = 3)
branin_results
plotComparison <- function(res, n = NULL, maximize = FALSE, m=0){
r <- lapply(res, \(x){
vals <- sapply(x, getElement, 'errors')
vals <- if(maximize) 1- vals else log10(vals)
y <- data.frame(t(apply(vals, 1,
\(y)c(mean = mean(y), sd = sd(y)))))
y})
d <- transform(array2DF(structure(r, dim = 3)), point = 5*seq(0,nrow(r[[1]])-1))
if(is.null(n)) n <- max(d$point)
d <- subset(d, point>=m & point<=n)
ggplot(d, aes(x = point, mean, color = Var1))+
geom_point() +
geom_line(linewidth = 1) +
geom_errorbar(aes(ymax = (if(maximize)pmin(mean + sd,1) else mean+sd),
ymin =(if(maximize) pmax(mean - sd, 0) else mean - sd)),
linewidth = 1, width = 1, alpha=0.5) +
labs(color = 'Method') +
ylab(if(maximize)'accuracy' else bquote(Log[10]* ' Loss')) +
xlab('m added points')
}
scale_x_discrete()
?scale_x_discrete()
branin_results
branin_results$plot
branin_results$plot + scale_x_continuous()
?branin_results$plot + scale_x_continuous()
?scale_x_continuous()
?branin_results$plot + scale_x_continuous(breaks=~.x+10)
branin_results$plot + scale_x_continuous(breaks=~.x+10)
branin_results$plot + scale_x_continuous(breaks=~.x)
branin_results$plot + scale_x_continuous(breaks=seq(10,30,5))
branin_results$plot + scale_x_continuous(breaks=seq(0,30,5))
branin_results$plot + scale_x_continuous(labels=~.x)
branin_results$plot + scale_x_continuous(labels=~.x+10)
branin_results$plot + scale_x_continuous(labels=~.x+10, breaks = ~.x)
branin_results$plot + scale_x_continuous(labels=~.x+10, breaks = ~seq(0,.x))
branin_results$plot + scale_x_continuous(labels=~.x+10, breaks = ~print(.x))
branin_results$plot + scale_x_continuous(labels=~.x+10, breaks = ~seq(.x[0], .x[1],5))
branin_results$plot + scale_x_continuous(labels=~.x+10, breaks = ~seq(.x[1], .x[2],5))
branin_results$plot + scale_x_continuous(labels=~.x+10, breaks = ~seq(0, .x[2],5))
plotComparison <- function(res, n = NULL, maximize = FALSE, m=0){
r <- lapply(res, \(x){
vals <- sapply(x, getElement, 'errors')
vals <- if(maximize) 1- vals else log10(vals)
y <- data.frame(t(apply(vals, 1,
\(y)c(mean = mean(y), sd = sd(y)))))
y})
d <- transform(array2DF(structure(r, dim = 3)), point = 5*seq(0,nrow(r[[1]])-1))
if(is.null(n)) n <- max(d$point)
d <- subset(d, point>=m & point<=n)
ggplot(d, aes(x = point, mean, color = Var1))+
geom_point() +
geom_line(linewidth = 1) +
geom_errorbar(aes(ymax = (if(maximize)pmin(mean + sd,1) else mean+sd),
ymin =(if(maximize) pmax(mean - sd, 0) else mean - sd)),
linewidth = 1, width = 1, alpha=0.5) +
labs(color = 'Method') +
ylab(if(maximize)'accuracy' else bquote(Log[10]* ' Loss')) +
xlab('Total points Used') +
scale_x_continuous(labels=~.x+10, breaks = ~seq(0, .x[2],5))
}
scales::rescale(1:3, c(0,3))
setwd("D:/Work/Ego/final/egoOptim/R")
setwd("D:/Work/Ego/final/egoOptim/R")
setwd("D:/Work/Ego/final/egoOptim/R")
df <- read.table(text = "
DateOfBirth,Sex,Question_01,Question_02,Question_03,Question_04
12-03-2001,M,Sometimes,Sometimes,Never,Never
21-08-1988,F,Always,Never,Always,Sometimes
30-11-1985,F,Always,Always,Sometimes,Never
01-04-2001,M,Sometimes,Sometimes,Never,Never
12-12-1986,M,Always,Sometimes,Always,Never
19-02-1982,F,Always,Always,Never,Sometimes
11-05-1980,M,Sometimes,Sometimes,Never,Never
01-06-2000,F,Always,Sometimes,Always,Always
20-11-1981,F,Never,Never,Never,Sometimes
30-07-1982,M,Never,Never,Sometimes,Never
", header = TRUE, sep = ",", na.strings = "")
# Levels F, M (alphabetically sorted -> 1, 2)
df$Sex_fact <- factor(df$Sex)
lookup_freq <- c(
"0" = "Never",
"1" = "Sometimes",
"3" = "Always"
)
df
lookup_freq
library(tidyverse)
df
df %>%
mutate(across(starts_with('Question'), recode, lookup_freq))
df %>%
mutate(across(starts_with('Question'), ~recode(.x,lookup_freq)))
lookup_freq
df %>%
mutate(across(starts_with('Question'), ~recode(.x,!!!lookup_freq)))
df %>%
mutate(across(starts_with('Question'), ~fct_recode(.x,!!!lookup_freq)))
df %>%
mutate(across(starts_with('Question'), ~fct_recode(.x,!!!lookup_freq))|>
rowSums())
df %>%
mutate(across(starts_with('Question'),
~as.numeric(fct_recode(.x,!!!lookup_freq)))|>
rowSums())
df %>%
mutate(across(starts_with('Question'),
~as.numeric(fct_recode(.x,!!!lookup_freq))))
df %>%
mutate(across(starts_with('Question'),
~as.numeric(recode(.x,!!!lookup_freq))))
df %>%
mutate(across(starts_with('Question'),
~recode(.x,!!!lookup_freq)))
enframe(lookup_freq)
deframe(enframe(lookup_freq))
deframe(rev(enframe(lookup_freq)))
df %>%
mutate(across(starts_with('Question'),
~recode(.x, !!!deframe(rev(enframe(lookup_freq))))))
df %>%
as_tibble()%>%
mutate(across(starts_with('Question'),
~recode(.x, !!!deframe(rev(enframe(lookup_freq))))))
df %>%
as_tibble()%>%
mutate(across(starts_with('Question'),
~as.numeric(recode(.x, !!!deframe(rev(enframe(lookup_freq)))))))
df %>%
as_tibble()%>%
mutate(across(starts_with('Question'),
~as.numeric(recode(.x, !!!deframe(rev(enframe(lookup_freq))))))|>
rowSums())
df %>%
as_tibble()%>%
mutate(TotalScore = across(starts_with('Question'),
~as.numeric(recode(.x, !!!deframe(rev(enframe(lookup_freq))))))|>
rowSums())
df %>%
as_tibble()%>%
mutate(TotalScore = across(starts_with('Question'),
~as.numeric(recode(.x, !!!deframe(rev(enframe(lookup_freq))))))|>
rowSums())
df %>%
mutate(TotalScore = across(starts_with('Question'),
~as.numeric(recode(.x, !!!deframe(rev(enframe(lookup_freq))))))|>
rowSums())
df
stack(lookup_freq)
unstack(rev(stack(lookup_freq)))
c(unstack(rev(stack(lookup_freq))))
df[, startsWith(names(df), 'Question')]
a <- df[, startsWith(names(df), 'Question')]
match(unlist(a), lookup_freq)
lookup[match(unlist(a), lookup_freq)]
lookup_freq[match(unlist(a), lookup_freq)]
names(lookup_freq[match(unlist(a), lookup_freq)])
rowsums(as.numeric(names(lookup_freq[match(unlist(a), lookup_freq)])),
c(col(a)))
rowsum(as.numeric(names(lookup_freq[match(unlist(a), lookup_freq)])),
c(col(a)))
rowsum(as.numeric(names(lookup_freq[match(unlist(a),
lookup_freq)])),
c(col(a)))
rowsum(as.numeric(names(lookup_freq[match(unlist(a),
lookup_freq)])),
c(row(a)))
b <- as.numeric(names(lookup_freq[match(unlist(a), lookup_freq)]))
rowsum(as.numeric(b), c(row(a)))
rowsum(as.numeric(b), (row(a)))
rowsum(as.numeric(b), c(row(a)))
cbind(a, Total_score = rowsum(as.numeric(b), c(row(a))))
a <- df[, startsWith(names(df), 'Question')]
b <- names(lookup_freq[match(unlist(a), lookup_freq)])
cbind(a, Total_score = rowsum(as.numeric(b), c(row(a))))
setNames(names(lookup_freq), lookup_freq)
setNames(names(lookup_freq), lookup_freq)[unlist(a)]
b <- setNames(names(lookup_freq), lookup_freq)[unlist(a)]
cbind(a, Total_score = rowsum(as.numeric(b), c(row(a))))
b <- names(lookup_freq[match(unlist(a), lookup_freq)])
normalize_btw_zero_and_one <- function(x){(x-min(x)+.00000001)/(max(x)-min(x)+.00000002)}
get_histogram <- function(data_set, column_name, bin_width, attribute_name) {
colname     <- as_label(enquo(column_name))
beta_par    <- MASS :: fitdistr(normalize_btw_zero_and_one(data_set[[colname]]), dbeta, start = list(shape1 = 1, shape2 = 1))
ggplot(data_set, aes(x= {{ column_name }})) +
geom_histogram(aes(y= after_stat(density)), binwidth = bin_width, fill= "lightblue", colour="black") +
xlab(paste0(attribute_name)) +
stat_function(fun = dbeta, args = list(shape1= beta_par$estimate[[1]], shape2= beta_par$estimate[[2]] ),
mapping = aes(color = "Beta")) +
scale_colour_manual("Distribution", values = c("red"))
}
test_dt <- rnorm(10000, 30, 1)
df <- data.frame(test_dt)
rm(test_dt)
get_histogram(df, test_dt, .05, "Test ")
df
df <- data.frame(Test = test_dt)
names(df)
names(df) <- 'Test'
names(df) <- 'test_df'
beta_par    <- MASS :: fitdistr(normalize_btw_zero_and_one(data_set[['test_df']]), dbeta, start = list(shape1 = 1, shape2 = 1))
beta_par    <- MASS :: fitdistr(normalize_btw_zero_and_one(df[['test_df']]), dbeta, start = list(shape1 = 1, shape2 = 1))
normalize_btw_zero_and_one(df[['test_df']])
normalize_btw_zero_and_one(df[['test_df']])|>range()
(x-min(x)+1e-7)/(max(x)-min(x)+2e-7)}
normalize_btw_zero_and_one <- function(x){
(x-min(x)+1e-7)/(max(x)-min(x)+2e-7)
}
normalize_btw_zero_and_one(df[['test_df']])|>range()
normalize_btw_zero_and_one <- function(x){
(x-min(x)+1e-8)/(max(x)-min(x)+2e-8)
}
normalize_btw_zero_and_one(df[['test_df']])|>range()
normalize_btw_zero_and_one <- function(x){
(x-min(x)+1e-8)/(max(x)-min(x)+2e-7)
}
normalize_btw_zero_and_one(df[['test_df']])|>range()
normalize_btw_zero_and_one <- function(x){
(x-min(x)+1e-8)/(max(x)-min(x)+2e-5)
}
normalize_btw_zero_and_one(df[['test_df']])|>range()
beta_par    <- MASS :: fitdistr(normalize_btw_zero_and_one(df[['test_df']]), dbeta, start = list(shape1 = 1, shape2 = 1))
dbeta
dbeta(0.3,1,1)
dbeta(0.3,0.5,10)
beta_par    <- MASS :: fitdistr(normalize_btw_zero_and_one(df[['test_df']]), dbeta, start = list(shape1 = 10, shape2 = 0.5))
warnings()
beta_par    <- MASS :: fitdistr(normalize_btw_zero_and_one(df[['test_df']]), dbeta, start = list(shape1 = 0.5, shape2 = 0.5))
beta_par    <- MASS :: fitdistr(normalize_btw_zero_and_one(df[['test_df']]), dbeta, start = list(shape1 = 0.5, shape2 = 2))
y<-normalize_btw_zero_and_one(df[['test_df']])
optim(c(1,1), \(x)sum(dbeta(y, x[1], x[2], log = TRUE)))
optim(c(1,1), \(x)-sum(dbeta(y, x[1], x[2], log = TRUE)))
optim(c(1,0.5), \(x)-sum(dbeta(y, x[1], x[2], log = TRUE)))
optim(c(1,0.5), \(x)-sum(dbeta(y, x[1], x[2], log = TRUE)), method = 'BFGS')
optim(c(1,0.5), \(x)-sum(dbeta(y, x[1], x[2], log = TRUE)), method = 'BFGS')
optim(c(1,0.5), \(x)-sum(dbeta(y, x[1], x[2], log = TRUE)))
optim(c(1,0.5), \(x)-sum(dbeta(y, x[1], x[2], log = TRUE)))$par->par
beta_par
beta_par$estimate
get_histogram <- function(data_set, column_name, bin_width, attribute_name) {
get_histogram <- function(data_set, column_name, bin_width, attribute_name) {
colname     <- as_label(enquo(column_name))
beta_par    <- MASS :: fitdistr(normalize_btw_zero_and_one(data_set[[colname]]), dbeta, start = list(shape1 = 1, shape2 = 1))
ggplot(data_set, aes(x= normalize_btw_zero_and_one(data_set[[colname]]))) +
geom_histogram(aes(y= after_stat(density)), binwidth = bin_width, fill= "lightblue", colour="black") +
xlab(paste0(attribute_name)) +
stat_function(fun = dbeta, args = list(shape1= beta_par$estimate[[1]],
shape2= beta_par$estimate[[2]] ),
mapping = aes(color = "Beta")) +
scale_colour_manual("Distribution", values = c("red"))
}
test_dt <- rnorm(10000, 30, 1)
df <- data.frame(Test = test_dt)
get_histogram(df, test_dt, .05, "Test ")
egoOptim:::print.my_optim
devtools::document()
devtools::document()
egoOptim:::print.my_optim
devtools::document()
branin_results <- method_compare('branin', budget = 35)
devtools::document()
branin_results <- method_compare('branin', budget = 35)
devtools::document()
branin_results <- method_compare('branin', budget = 35)
branin_results
v1 <- c(1, .8, 0, .1, .2)
v2 <- c(.8, 1, .4, 0, .9)
v3 <- c(0, .4, 1, 0, 0)
v4 <- c(.1, 0, 0, 1, .5)
v5 <- c(.2, .9, 0, .5, 1)
R <- matrix(data=c(v1,v2,v3,v4,v5), nrow=5, byrow=TRUE)
R2 <- matrix(NA, nrow=5, ncol=5)
for(i in 1:nrow(R))
{
for(j in 1:ncol(R))
{
R2[i,j] <- max(min(R[i,1],R[1,j]), min(R[i,2],R[2,j]), min(R[i,3],R[3,j]), min(R[i,4],R[4,j]), min(R[i,5],R[5,j]))
}
}
R
R2
R
R3 <-  matrix(NA, nrow=5, ncol=5)
for(i in 1:nrow(R)) for(j in 1:ncol(R))R3[i,j] <- max(pmin(R[i, ],R[,j]))
R3
all.equal(R3, R2)
R2
col(R)
apply(R, 2, \(x)apply(R, 2, \(y) pmin(x,y)))
apply(R, 2, \(x)apply(R, 2, \(y) max(pmin(x,y))))
all.equal(apply(R, 2, \(x)apply(R, 2, \(y) max(pmin(x,y)))), R2)
apply(R, 2, \(x)apply(R, 1, \(y) max(pmin(x,y)))), R2)
all.equal(apply(R, 2, \(x)apply(R, 1, \(y) max(pmin(x,y)))), R2)
R
R2
R2==t(R2)
R2
all.equal(R3, R2)
pmin(R, R[,1])
matrixStats::colMaxs(pmin(R, R[,1]))
R2[1,]
gl(5,3)
gl(ncol(R),ncol(R))
as.integer(gl(ncol(R),ncol(R)))
as.integer(gl(n<-ncol(R),n))
pmin(R, R[,as.integer(gl(n<-ncol(R),n))])
f <- as.integer(gl(n<-ncol(R),n))
pmin(R, R[,f])
tapply(pmin(R[,f], R)
pmin(R[,f], R)
pmin(R[,f], R)
R2
f
array(f, dim(length(f), n))
array(f, c(length(f), n))
array(f, c(n, length(f)))
f
apply(pmin(R[,f], R),1, tapply, f, max)
apply(pmin(R[,f], R),1, tapply, f, max)|>all.equal(R2)
R2
apply(pmin(R[,f], R),2, tapply, f, max)
R[1,]
pmin(R[,1], R)
pmin(R, R[,1])
apply(pmin(R, R[,1]),1,max)
sapply(1:n, \(j)apply(pmin(R, R[,j]),1,max)
)
apply(pmin(R, R[,j])
)
(pmin(R, R[,j]))
do.call(pmax, data.frame(pmin(R, R[,j])))
do.call(pmax, data.frame(pmin(R, R[,1])))
sapply(1:n, \(j)do.call(pmax, data.frame(pmin(R, R[,j])))
)
R2
devtools::install_github
remotes::install_github
remotes:::install_remotes
devtools:::::install_remotes
devtools:::install_remotes
devtools::install_remotes
devtools::install_github()
devtools::install_github
devtools:::install_remotes
remotes:::install_remotes
remotes:::install_remote
optim(numeric(4), \(X, y, b) crossprod(y - X%*%b), y = iris[,1],
X = as.matrix(iris[2:4]))
optim(numeric(3), \(X, y, b) crossprod(y - X%*%b), y = iris[,1],
X = as.matrix(iris[2:4]))
lm(Sepal.Length~., iris[-5])
optim(numeric(3), \(X, y, b) crossprod(y - X%*%b), y = iris[,1],
X = cbind(1, as.matrix(iris[2:4])))
optim(numeric(4), \(X, y, b) crossprod(y - X%*%b), y = iris[,1],
X = cbind(1, as.matrix(iris[2:4])))
lm(Sepal.Length~., iris[-5])
glmnet::coef.glmnet
?glmnet::coef.glmnet
