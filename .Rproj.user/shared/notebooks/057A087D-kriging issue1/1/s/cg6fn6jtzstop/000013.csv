"0","# Gaussian Kernel"
"0","gaus <- function(param,X1, X2){"
"0","  if(missing(X2)) X2 <- X1"
"0","  if(is.null(dim(X1))) X1 <- t(X1)"
"0","  if(is.null(dim(X2))) X2 <- t(X2)"
"0","  exp(-0.5*apply(X1, 1, \(v)colSums(((t(X2)-v)/param)^2)))"
"0","}"
"0",""
"0","# Negative of the log likelihood to be minimixed."
"0","negative_loglike <-function(param, X, y){ "
"0","  if(any(param<=0)) return(NA)"
"0","  n = length(y)"
"0","  R = gaus(param, X)"
"0","  mu = sum(solve(R,y))/sum(solve(R, rep(1, n)))"
"0","  sig2 = c((y - mu) %*% solve(R, y - mu)/n)"
"0","  n/2 * (log(2*pi*sig2) + log(det(R))/n + 1)"
"0","}"
"0",""
"0","# obtain the optimal lengthscale parameters"
"0","X <- as.matrix(X)"
"0","newX <- as.matrix(newX)"
"0","param <- optim(colMeans(X), negative_loglike, X = X, y=y)$par"
"0",""
"0","# Do the Prediction"
"0","my_krige <- function(param, X, y, newX){"
"0","  r <- gaus(param, X, newX)"
"0","  R <- gaus(param, X)"
"0","  Jn <- rep(1, n <- length(y))"
"0","  denom <- sum(solve(R, Jn))"
"0","  mu <- c(sum(solve(R, y))/denom)"
"0","  sig2 = c((y - mu) %*% solve(R, y - mu)/n)"
"0","  sig <- sig2*(1 - r %*%solve(R, r) +  (1 - Jn %*%solve(R, r))^2/denom)"
"0","  y_hat <- mu +  solve(R, r)%*%(y - mu)"
"0","  c(yhat=y_hat, sd=sqrt(sig), trend = mu, var = sig2)"
"0","}"
"0","my_krige(param, X, y, newX)"
"1","      yhat "
"1","        sd "
"1","     trend "
"1","       var "
"1","
"
"1","5.59536959 "
"1","0.06231145 "
"1","2.71527898 "
"1","5.41637087 "
"1","
"
