import numpy as np
spherical = lambda h: 2*(3/2*h/7 - 0.5*(h/7)**3)
X = np.c_[(4.0,2,4.1,0.3,2),(5.5,1.2,3.7,2,2.5)]
y = np.r_[(4.2, 6.1, 0.2, 0.7, 5.2)]

#X,y = data.aniso()['sample']
s0 = np.r_[(2.,2.)]
K = spherical(np.sqrt(((X - X[:, None])**2).sum(2)))
s0_k = np.r_[1, spherical(np.sqrt(((X-s0)**2).sum(1)))]
n = np.vstack([np.ones(X.shape[0]+1), np.c_[np.ones(X.shape[0]), K]])
n[0,0] = 0
w = np.linalg.solve(n, s0_k)
np.r_[w[1:] @ y, s0_k @ w]

#from skgstat import data,Kriging,OrdinaryKriging,Variogram
V = Variogram(X,y, maxlag=2,model='gaussian')
a = OrdinaryKriging(V, min_points=0, max_points=5)

a.transform(np.array([s0[0]]), np.array([s0[1]]))
#--------------------------------------------------------------
n = X.shape[0]
par = [1,1]
sig2 = 1
mu = 0
for i in range(10):
  Rinv = np.linalg.inv(np.exp(-np.sqrt((((X - X[:,None])/par)**2).sum(2))))
  #-0.5*(y - mu) @ Rinv @ (y - mu)/sig2
  mu =  Rinv.sum(0) @ y/Rinv.sum()
  sig2 = 1/n * (y-mu) @ Rinv @ (y-mu)
  print(f'mu={mu:.3f}, sig2={sig2:.3f}')

