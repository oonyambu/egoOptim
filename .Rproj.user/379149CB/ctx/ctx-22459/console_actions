{
    "type": [
        2,
        2,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2
    ],
    "data": [
        "\nR version 4.3.1 (2023-06-16 ucrt) -- \"Beagle Scouts\"\nCopyright (C) 2023 The R Foundation for Statistical Computing\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "[Workspace loaded from D:/Work/Ego/final/egoOptim2/egoOptim/.RData]\r\n\r\n\nRestarting R session...\n\n",
        "> ",
        "library(egoOptim)",
        "\nAttaching package: ‘egoOptim’\n\n",
        "The following object is masked from ‘package:base’:\n\n    drop\n\n",
        "> ",
        "svm_accuracy <- function(par, train, test){",
        "+ ",
        "",
        "+ ",
        "  mod <- svm(train[-1], train[[1]], kernel = 'radial',",
        "+ ",
        "             gamma = par[1], cost = par[2])",
        "+ ",
        "  Metrics::accuracy(test[[1]], predict(mod, test[-1]))",
        "+ ",
        "}",
        "> ",
        "svm_train <- function(par, train, kfolds = 10){",
        "+ ",
        "",
        "+ ",
        "  train_data <- train[-1]",
        "+ ",
        "  response <- model.response(train)",
        "+ ",
        "  folds <- sample(rep(seq(kfolds), n<-nrow(train_data), length = n))",
        "+ ",
        "",
        "+ ",
        "  preds <- sapply(seq_len(kfolds), \\(i){",
        "+ ",
        "    obs <- svm(x = train_data[folds!=i,], y = response[folds != i ],",
        "+ ",
        "               gamma = par[1], cost = par[2],   kernel = 'radial')",
        "+ ",
        "    Metrics::accuracy(response[folds==i],",
        "+ ",
        "                      predict(obs, train_data[folds==i,]))|>",
        "+ ",
        "      mean()",
        "+ ",
        "  })",
        "+ ",
        "  mean(preds)",
        "+ ",
        "}",
        "> ",
        "library(e1071)",
        "> ",
        "wine_res <- method_compare(svm_train, c(2^-16,2^-6), c(2^6,2^16),",
        "+ ",
        "                    train = wine, maximize = TRUE,",
        "+ ",
        "               control = list(trueglobal = 1),",
        "+ ",
        "               reps=3, budget = 50)",
        "RSO ITERATION: 1 \n",
        "> ",
        "wine_res <- method_compare(svm_train, c(2^-16,2^-6), c(2^6,2^16),",
        "+ ",
        "                    train = wine, maximize = TRUE,",
        "+ ",
        "               control = list(trueglobal = 1),",
        "+ ",
        "               reps=1, budget = 50)",
        "RSO ITERATION: 1 \nit: 01\tf(x*): 0.96667\terr: 0.01176\t[0.0000, 49998.9948]\tcount:00\ttrueERR: 0.03333\nit: 02\tf(x*): 0.96667\terr: 0.00000\t[0.0000, 49998.9948]\tcount:01\ttrueERR: 0.03333\nit: 03\tf(x*): 0.96667\terr: 0.00000\t[0.0000, 49998.9948]\tcount:02\ttrueERR: 0.03333\nit: 04\tf(x*): 0.97712\terr: 0.01046\t[0.2283, 30246.1941]\tcount:02\ttrueERR: 0.02288\nit: 05\tf(x*): 0.97778\terr: 0.00065\t[0.1644, 28608.9014]\tcount:02\ttrueERR: 0.02222\nit: 06\tf(x*): 0.97778\terr: 0.00000\t[0.1644, 28608.9014]\tcount:03\ttrueERR: 0.02222\nit: 07\tf(x*): 0.98889\terr: 0.01111\t",
        "[0.1220, 4507.1912]\tcount:03\ttrueERR: 0.01111\nit: 08\tf(x*): 0.98889\terr: 0.00000\t[0.1220, 4507.1912]\tcount:04\ttrueERR: 0.01111\nit: 09\tf(x*): 0.98889\terr: 0.00000\t[0.1220, 4507.1912]\tcount:05\ttrueERR: 0.01111\nit: 10\tf(x*): 0.98889\terr: 0.00000\t[0.1220, 4507.1912]\tcount:06\ttrueERR: 0.01111\nit: 11\tf(x*): 0.98889\terr: 0.00000\t[0.1220, 4507.1912]\tcount:07\ttrueERR: 0.01111\nit: 12\tf(x*): 0.98889\terr: 0.00000\t[0.1220, 4507.1912]\tcount:08\ttrueERR: 0.01111\nit: 13\tf(x*): 0.98889\terr: 0.00000\t[0.1220, 4507.1912]\tcount:09\t",
        "trueERR: 0.01111\nEGO ITERATION: 1 \nit: 01\tf(x*): 0.95490\terr: 0.00000\t[0.0000, 39339.3765]\tcount:00\ttrueERR: 0.04510\nit: 02\tf(x*): 0.96634\terr: 0.01144\t[0.0000, 53578.4642]\tcount:00\ttrueERR: 0.03366\nit: 03\tf(x*): 0.96634\terr: 0.00000\t[0.0000, 53578.4642]\tcount:00\ttrueERR: 0.03366\nit: 04\tf(x*): 0.96634\terr: 0.00000\t[0.0000, 53578.4642]\tcount:00\ttrueERR: 0.03366\nit: 05\tf(x*): 0.96634\terr: 0.00000\t[0.0000, 53578.4642]\tcount:00\ttrueERR: 0.03366\nit: 06\tf(x*): 0.97190\terr: 0.00556\t[0.0000, 20757.8682]\tcount:00\ttrueERR: 0.02810",
        "\nit: 07\tf(x*): 0.97190\terr: 0.00000\t[0.0000, 20757.8682]\tcount:00\ttrueERR: 0.02810\nit: 08\tf(x*): 0.97190\terr: 0.00000\t[0.0000, 20757.8682]\tcount:00\ttrueERR: 0.02810\nit: 09\tf(x*): 0.97190\terr: 0.00000\t[0.0000, 20757.8682]\tcount:00\ttrueERR: 0.02810\nit: 10\tf(x*): 0.97190\terr: 0.00000\t[0.0000, 20757.8682]\tcount:00\ttrueERR: 0.02810\nit: 11\tf(x*): 0.97190\terr: 0.00000\t[0.0000, 20757.8682]\tcount:00\ttrueERR: 0.02810\nit: 12\tf(x*): 0.97190\terr: 0.00000\t[0.0000, 20757.8682]\tcount:00\ttrueERR: 0.02810\nit: 13\tf(x*): 0.97190\terr: 0.00000\t",
        "[0.0000, 20757.8682]\tcount:00\ttrueERR: 0.02810\nTREGO ITERATION: 1 \nit: 01\tf(x*): 0.96013\terr: 0.00523\t[0.0000, 49998.9507]\tcount:00\ttrueERR: 0.03987\nit: 02\tf(x*): 0.98301\terr: 0.02288\t[0.1212, 48894.9724]\tcount:00\ttrueERR: 0.01699\nit: 03\tf(x*): 0.98301\terr: 0.00000\t[0.1212, 48894.9724]\tcount:00\ttrueERR: 0.01699\nit: 04\tf(x*): 0.98333\terr: 0.00033\t[0.1718, 2849.8246]\tcount:00\ttrueERR: 0.01667\nit: 05\tf(x*): 0.98333\terr: 0.00000\t[0.1718, 2849.8246]\tcount:00\ttrueERR: 0.01667\nit: 06\tf(x*): 0.98333\terr: 0.00000\t[0.1718, 2849.8246]\tcount:00\t",
        "trueERR: 0.01667\nit: 07\tf(x*): 0.98333\terr: 0.00000\t[0.1718, 2849.8246]\tcount:00\ttrueERR: 0.01667\nit: 08\tf(x*): 0.98856\terr: 0.00523\t[0.1029, 57050.5644]\tcount:00\ttrueERR: 0.01144\nit: 09\tf(x*): 0.98856\terr: 0.00000\t[0.1029, 57050.5644]\tcount:00\ttrueERR: 0.01144\nit: 10\tf(x*): 0.98856\terr: 0.00000\t[0.1029, 57050.5644]\tcount:00\ttrueERR: 0.01144\nit: 11\tf(x*): 0.98856\terr: 0.00000\t[0.1029, 57050.5644]\tcount:00\ttrueERR: 0.01144\nit: 12\tf(x*): 0.98856\terr: 0.00000\t[0.1029, 57050.5644]\tcount:00\ttrueERR: 0.01144\nit: 13\tf(x*): 0.98856\terr: 0.00000\t",
        "[0.1029, 57050.5644]\tcount:00\ttrueERR: 0.01144\n",
        "Error in data.frame(list(Var1 = c(\"RSO\", \"RSO\", \"RSO\", \"RSO\", \"RSO\", \"RSO\",  : \n  arguments imply differing number of rows: 42, 0\n",
        "> ",
        "debug(method_compare)",
        "> ",
        "wine_res <- method_compare(svm_train, c(2^-16,2^-6), c(2^6,2^16),",
        "+ ",
        "                    train = wine, maximize = TRUE,",
        "+ ",
        "               control = list(trueglobal = 1),",
        "+ ",
        "               reps=1, budget = 50)",
        "debugging in: method_compare(svm_train, c(2^-16, 2^-6), c(2^6, 2^16), train = wine, \n    maximize = TRUE, control = list(trueglobal = 1), reps = 1, \n    budget = 50)\ndebug at D:/Work/Ego/final/egoOptim2/egoOptim/R/utils.R#33: {\n    fun_name <- gsub(\"\\\\W\", \"\", deparse1(substitute(fun)))\n    optimal <- control$trueglobal\n    if (missing(lower)) {\n        dom <- domain(fun)\n        fun <- getFromNamespace(fun, \"egoOptim\")\n        if (is.function(dom)) {\n            if (is.null(p)) \n                stop(\"the dimension `p` must be provided for \", \n",
        "                  fun_name)\n            else dom <- dom(p)\n        }\n        if (is.null(optimal)) \n            optimal <- dom$opt$f[1]\n        lower <- if (!is.null(dom$lower)) \n            dom$lower\n        else rep(0, p)\n        upper <- if (!is.null(dom$upper)) \n            dom$upper\n        else rep(1, p)\n    }\n    if (maximize & is.null(optimal)) \n        optimal <- -1\n    control$trueglobal <- optimal\n    res <- setNames(vector(\"list\", 3), c(\"RSO\", \"EGO\", \"TREGO\"))\n    control$do_maxit <- TRUE\n    RScontrol <- modifyList(control, list(basicEGO = FALSE))\n",
        "    EGcontrol <- modifyList(control, list(basicEGO = TRUE))\n    TRcontrol <- modifyList(control, list(basicEGO = TRUE, method = \"TREGO\"))\n    for (i in seq_len(reps)) {\n        X <- lhs::maximinLHS(5 * length(lower), length(lower))\n        X1 <- mapply(rescale, data.frame(X), data.frame(rbind(lower, \n            upper)))\n        y1 <- apply(X1, 1, function(x) (-1)^(maximize) * fun(x, \n            ...))\n        cat(\"RSO ITERATION:\", i, \"\\n\")\n        res[[\"RSO\"]][[i]] <- optimize_fun(fun, lower, upper, \n            ..., X = X1, y = y1, budget = budget, maximize = maximize, \n",
        "            control = RScontrol)\n        cat(\"EGO ITERATION:\", i, \"\\n\")\n        res[[\"EGO\"]][[i]] <- optimize_fun(fun, lower, upper, \n            ..., X = X1, y = y1, budget = budget, maximize = maximize, \n            control = EGcontrol)\n        cat(\"TREGO ITERATION:\", i, \"\\n\")\n        res[[\"TREGO\"]][[i]] <- optimize_fun(fun, lower, upper, \n            ..., X = X1, y = y1, maximize = maximize, budget = budget, \n            control = TRcontrol)\n        if (expansion_rate > 0) {\n            cat(\"RSO\", expansion_rate, \"ITERATION: \", i, \"\\n\", \n",
        "                sep = \"\")\n            res[[\"RSO1\"]][[i]] <- optimize_fun(fun, lower, upper, \n                ..., X = X1, y = y1, expansion_rate = expansion_rate, \n                maximize = maximize, budget = budget, control = RScontrol)\n        }\n    }\n    r <- lapply(res, function(x) {\n        vals <- sapply(x, getElement, \"errors\")\n        vals <- if (maximize) \n            1 - vals\n        else log10(vals)\n        y <- data.frame(t(apply(vals, 1, function(y) c(mean = mean(y), \n            sd = sd(y)))))\n",
        "        y\n    })\n    d <- transform(array2DF(structure(r, dim = 3)), point = control$nsteps * \n        seq(0, nrow(r[[1]]) - 1))\n    assign(fun_name, d)\n    if (!is.null(file)) \n        write.csv(d, file = file)\n    list(res = res, plot = plotComparison(d, maximize = maximize, \n        nsteps = control$nsteps, errorbars = !maximize))\n}\n",
        "Browse[2]> ",
        "n",
        "debug at D:/Work/Ego/final/egoOptim2/egoOptim/R/utils.R#37: fun_name <- gsub(\"\\\\W\", \"\", deparse1(substitute(fun)))\n",
        "Browse[2]> ",
        "n",
        "debug at D:/Work/Ego/final/egoOptim2/egoOptim/R/utils.R#39: optimal <- control$trueglobal\n",
        "Browse[2]> ",
        "n",
        "debug at D:/Work/Ego/final/egoOptim2/egoOptim/R/utils.R#40: if (missing(lower)) {\n    dom <- domain(fun)\n    fun <- getFromNamespace(fun, \"egoOptim\")\n    if (is.function(dom)) {\n        if (is.null(p)) \n            stop(\"the dimension `p` must be provided for \", fun_name)\n        else dom <- dom(p)\n    }\n    if (is.null(optimal)) \n        optimal <- dom$opt$f[1]\n    lower <- if (!is.null(dom$lower)) \n        dom$lower\n    else rep(0, p)\n    upper <- if (!is.null(dom$upper)) \n        dom$upper\n    else rep(1, p)\n",
        "}\n",
        "Browse[2]> ",
        "n",
        "debug at D:/Work/Ego/final/egoOptim2/egoOptim/R/utils.R#51: if (maximize & is.null(optimal)) optimal <- -1\n",
        "Browse[2]> ",
        "n",
        "debug at D:/Work/Ego/final/egoOptim2/egoOptim/R/utils.R#52: control$trueglobal <- optimal\n",
        "Browse[2]> ",
        "n",
        "debug at D:/Work/Ego/final/egoOptim2/egoOptim/R/utils.R#53: res <- setNames(vector(\"list\", 3), c(\"RSO\", \"EGO\", \"TREGO\"))\n",
        "Browse[2]> ",
        "n",
        "debug at D:/Work/Ego/final/egoOptim2/egoOptim/R/utils.R#54: control$do_maxit <- TRUE\n",
        "Browse[2]> ",
        "n",
        "debug at D:/Work/Ego/final/egoOptim2/egoOptim/R/utils.R#55: RScontrol <- modifyList(control, list(basicEGO = FALSE))\n",
        "Browse[2]> ",
        "n",
        "debug at D:/Work/Ego/final/egoOptim2/egoOptim/R/utils.R#56: EGcontrol <- modifyList(control, list(basicEGO = TRUE))\n",
        "Browse[2]> ",
        "n",
        "debug at D:/Work/Ego/final/egoOptim2/egoOptim/R/utils.R#57: TRcontrol <- modifyList(control, list(basicEGO = TRUE, method = \"TREGO\"))\n",
        "Browse[2]> ",
        "n",
        "debug at D:/Work/Ego/final/egoOptim2/egoOptim/R/utils.R#59: for (i in seq_len(reps)) {\n    X <- lhs::maximinLHS(5 * length(lower), length(lower))\n    X1 <- mapply(rescale, data.frame(X), data.frame(rbind(lower, \n        upper)))\n    y1 <- apply(X1, 1, function(x) (-1)^(maximize) * fun(x, ...))\n    cat(\"RSO ITERATION:\", i, \"\\n\")\n    res[[\"RSO\"]][[i]] <- optimize_fun(fun, lower, upper, ..., \n        X = X1, y = y1, budget = budget, maximize = maximize, \n        control = RScontrol)\n    cat(\"EGO ITERATION:\", i, \"\\n\")\n",
        "    res[[\"EGO\"]][[i]] <- optimize_fun(fun, lower, upper, ..., \n        X = X1, y = y1, budget = budget, maximize = maximize, \n        control = EGcontrol)\n    cat(\"TREGO ITERATION:\", i, \"\\n\")\n    res[[\"TREGO\"]][[i]] <- optimize_fun(fun, lower, upper, ..., \n        X = X1, y = y1, maximize = maximize, budget = budget, \n        control = TRcontrol)\n    if (expansion_rate > 0) {\n        cat(\"RSO\", expansion_rate, \"ITERATION: \", i, \"\\n\", sep = \"\")\n        res[[\"RSO1\"]][[i]] <- optimize_fun(fun, lower, upper, \n            ..., X = X1, y = y1, expansion_rate = expansion_rate, \n",
        "            maximize = maximize, budget = budget, control = RScontrol)\n    }\n}\n",
        "Browse[2]> ",
        "n",
        "debug at D:/Work/Ego/final/egoOptim2/egoOptim/R/utils.R#60: X <- lhs::maximinLHS(5 * length(lower), length(lower))\n",
        "Browse[2]> ",
        "n",
        "debug at D:/Work/Ego/final/egoOptim2/egoOptim/R/utils.R#61: X1 <- mapply(rescale, data.frame(X), data.frame(rbind(lower, \n    upper)))\n",
        "Browse[2]> ",
        "n",
        "debug at D:/Work/Ego/final/egoOptim2/egoOptim/R/utils.R#62: y1 <- apply(X1, 1, function(x) (-1)^(maximize) * fun(x, ...))\n",
        "Browse[2]> ",
        "n",
        "debug at D:/Work/Ego/final/egoOptim2/egoOptim/R/utils.R#63: cat(\"RSO ITERATION:\", i, \"\\n\")\n",
        "Browse[2]> ",
        "n",
        "RSO ITERATION: 1 \ndebug at D:/Work/Ego/final/egoOptim2/egoOptim/R/utils.R#64: res[[\"RSO\"]][[i]] <- optimize_fun(fun, lower, upper, ..., X = X1, \n    y = y1, budget = budget, maximize = maximize, control = RScontrol)\n",
        "Browse[2]> ",
        "n",
        "it: 01\tf(x*): 0.95458\terr: 0.00490\t[0.0000, 51342.7417]\tcount:00\ttrueERR: 0.04542\nit: 02\tf(x*): 0.95458\terr: 0.00000\t[0.0000, 51342.7417]\tcount:01\ttrueERR: 0.04542\nit: 03\tf(x*): 0.95458\terr: 0.00000\t[0.0000, 51342.7417]\tcount:02\ttrueERR: 0.04542\nit: 04\tf(x*): 0.95458\terr: 0.00000\t[0.0000, 51342.7417]\tcount:03\ttrueERR: 0.04542\nit: 05\tf(x*): 0.97190\terr: 0.01732\t[0.2054, 57866.9437]\tcount:03\ttrueERR: 0.02810\nit: 06\tf(x*): 0.97745\terr: 0.00556\t[0.1309, 58868.1094]\tcount:03\ttrueERR: 0.02255\nit: 07\tf(x*): 0.98301\terr: 0.00556\t",
        "[0.0938, 59632.4613]\tcount:03\ttrueERR: 0.01699\nit: 08\tf(x*): 0.98889\terr: 0.00588\t[0.1054, 60520.2376]\tcount:03\ttrueERR: 0.01111\nit: 09\tf(x*): 0.98889\terr: 0.00000\t[0.1054, 60520.2376]\tcount:04\ttrueERR: 0.01111\nit: 10\tf(x*): 0.98889\terr: 0.00000\t[0.1054, 60520.2376]\tcount:05\ttrueERR: 0.01111\nit: 11\tf(x*): 0.98889\terr: 0.00000\t[0.1054, 60520.2376]\tcount:06\ttrueERR: 0.01111\nit: 12\tf(x*): 0.98889\terr: 0.00000\t[0.1054, 60520.2376]\tcount:07\ttrueERR: 0.01111\nit: 13\tf(x*): 0.98889\terr: 0.00000\t[0.1054, 60520.2376]\tcount:08\t",
        "trueERR: 0.01111\ndebug at D:/Work/Ego/final/egoOptim2/egoOptim/R/utils.R#68: cat(\"EGO ITERATION:\", i, \"\\n\")\n",
        "Browse[2]> ",
        "n",
        "EGO ITERATION: 1 \ndebug at D:/Work/Ego/final/egoOptim2/egoOptim/R/utils.R#69: res[[\"EGO\"]][[i]] <- optimize_fun(fun, lower, upper, ..., X = X1, \n    y = y1, budget = budget, maximize = maximize, control = EGcontrol)\n",
        "Browse[2]> ",
        "n",
        "it: 01\tf(x*): 0.97190\terr: 0.02222\t[0.1810, 47465.5486]\tcount:00\ttrueERR: 0.02810\nit: 02\tf(x*): 0.97778\terr: 0.00588\t[0.1535, 59514.4008]\tcount:00\ttrueERR: 0.02222\nit: 03\tf(x*): 0.97778\terr: 0.00000\t[0.1535, 59514.4008]\tcount:00\ttrueERR: 0.02222\nit: 04\tf(x*): 0.97778\terr: 0.00000\t[0.1535, 59514.4008]\tcount:00\ttrueERR: 0.02222\nit: 05\tf(x*): 0.98333\terr: 0.00556\t[0.1198, 1740.1108]\tcount:00\ttrueERR: 0.01667\nit: 06\tf(x*): 0.98333\terr: 0.00000\t[0.1198, 1740.1108]\tcount:00\ttrueERR: 0.01667\nit: 07\tf(x*): 0.98333\terr: 0.00000\t",
        "[0.1198, 1740.1108]\tcount:00\ttrueERR: 0.01667\nit: 08\tf(x*): 0.98333\terr: 0.00000\t[0.1198, 1740.1108]\tcount:00\ttrueERR: 0.01667\nit: 09\tf(x*): 0.98333\terr: 0.00000\t[0.1198, 1740.1108]\tcount:00\ttrueERR: 0.01667\nit: 10\tf(x*): 0.98333\terr: 0.00000\t[0.1198, 1740.1108]\tcount:00\ttrueERR: 0.01667\nit: 11\tf(x*): 0.98333\terr: 0.00000\t[0.1198, 1740.1108]\tcount:00\ttrueERR: 0.01667\nit: 12\tf(x*): 0.98333\terr: 0.00000\t[0.1198, 1740.1108]\tcount:00\ttrueERR: 0.01667\nit: 13\tf(x*): 0.98333\terr: 0.00000\t[0.1198, 1740.1108]\tcount:00\t",
        "trueERR: 0.01667\ndebug at D:/Work/Ego/final/egoOptim2/egoOptim/R/utils.R#73: cat(\"TREGO ITERATION:\", i, \"\\n\")\n",
        "Browse[2]> ",
        "n",
        "TREGO ITERATION: 1 \ndebug at D:/Work/Ego/final/egoOptim2/egoOptim/R/utils.R#74: res[[\"TREGO\"]][[i]] <- optimize_fun(fun, lower, upper, ..., X = X1, \n    y = y1, maximize = maximize, budget = budget, control = TRcontrol)\n",
        "Browse[2]> ",
        "n",
        "it: 01\tf(x*): 0.98333\terr: 0.03366\t[0.0000, 52355.5610]\tcount:00\ttrueERR: 0.01667\nit: 02\tf(x*): 0.98333\terr: 0.00000\t[0.0000, 52355.5610]\tcount:00\ttrueERR: 0.01667\nit: 03\tf(x*): 0.98333\terr: 0.00000\t[0.0000, 52355.5610]\tcount:00\ttrueERR: 0.01667\nit: 04\tf(x*): 0.98333\terr: 0.00000\t[0.0000, 52355.5610]\tcount:00\ttrueERR: 0.01667\nit: 05\tf(x*): 0.98333\terr: 0.00000\t[0.0000, 52355.5610]\tcount:00\ttrueERR: 0.01667\nit: 06\tf(x*): 0.98333\terr: 0.00000\t[0.0000, 52355.5610]\tcount:00\ttrueERR: 0.01667\nit: 07\tf(x*): 0.98333\terr: 0.00000\t",
        "[0.0000, 52355.5610]\tcount:00\ttrueERR: 0.01667\nit: 08\tf(x*): 0.98333\terr: 0.00000\t[0.0000, 52355.5610]\tcount:00\ttrueERR: 0.01667\nit: 09\tf(x*): 0.98333\terr: 0.00000\t[0.0000, 52355.5610]\tcount:00\ttrueERR: 0.01667\nit: 10\tf(x*): 0.98333\terr: 0.00000\t[0.0000, 52355.5610]\tcount:00\ttrueERR: 0.01667\nit: 11\tf(x*): 0.98333\terr: 0.00000\t[0.0000, 52355.5610]\tcount:00\ttrueERR: 0.01667\nit: 12\tf(x*): 0.98333\terr: 0.00000\t[0.0000, 52355.5610]\tcount:00\ttrueERR: 0.01667\nit: 13\tf(x*): 0.98333\terr: 0.00000\t[0.0000, 52355.5610]\tcount:00\t",
        "trueERR: 0.01667\ndebug at D:/Work/Ego/final/egoOptim2/egoOptim/R/utils.R#78: if (expansion_rate > 0) {\n    cat(\"RSO\", expansion_rate, \"ITERATION: \", i, \"\\n\", sep = \"\")\n    res[[\"RSO1\"]][[i]] <- optimize_fun(fun, lower, upper, ..., \n        X = X1, y = y1, expansion_rate = expansion_rate, maximize = maximize, \n        budget = budget, control = RScontrol)\n}\n",
        "Browse[2]> ",
        "n",
        "debug at D:/Work/Ego/final/egoOptim2/egoOptim/R/utils.R#87: r <- lapply(res, function(x) {\n    vals <- sapply(x, getElement, \"errors\")\n    vals <- if (maximize) \n        1 - vals\n    else log10(vals)\n    y <- data.frame(t(apply(vals, 1, function(y) c(mean = mean(y), \n        sd = sd(y)))))\n    y\n})\n",
        "Browse[2]> ",
        "n",
        "debug at D:/Work/Ego/final/egoOptim2/egoOptim/R/utils.R#93: d <- transform(array2DF(structure(r, dim = 3)), point = control$nsteps * \n    seq(0, nrow(r[[1]]) - 1))\n",
        "Browse[2]> ",
        "res$RSO[[1]]",
        "\nCall:\noptimize_fun(fun = fun, lower = lower, upper = upper, train = ..1, \n    X = X1, y = y1, maximize = maximize, budget = budget, control = RScontrol)\n\n\t\t\t\tKriging Based RSO\n========================================================================= \n\tx*=[0.1054, 60520.2376]\tf(x*) = -0.9889\t\tTotal Points: 49 \n_________________________________________________________________________ \n",
        "Browse[2]> ",
        "res$RSO[[1]]$env$ctr$nsteps",
        "[1] 3\n",
        "Browse[2]> ",
        "res$RSO[[1]]$loss",
        " [1] -0.9604575 -0.9663399 -0.9607843 -0.9552288 -0.9549020 -0.9722222 -0.9722222 -0.9885621\n [9] -0.9888889 -0.9888889 -0.9833333 -0.9833333 -0.9888889 -0.9833333\n",
        "Browse[2]> ",
        "res$RSO[[1]]$errors",
        " [1] 0.05032680 0.04542484 0.04542484 0.04542484 0.04542484 0.02810458 0.02254902 0.01699346\n [9] 0.01111111 0.01111111 0.01111111 0.01111111 0.01111111 0.01111111\n",
        "Browse[2]> ",
        "res$RSO[[2]]$errors",
        "Error in res$RSO[[2]] : subscript out of bounds\n",
        "Browse[2]> ",
        "res$TREGO[[1]]",
        "\nCall:\noptimize_fun(fun = fun, lower = lower, upper = upper, train = ..1, \n    X = X1, y = y1, maximize = maximize, budget = budget, control = TRcontrol)\n\n\t\t\t\tKriging Based RSO\n========================================================================= \n\tx*=[0.0000, 52355.5610]\tf(x*) = -0.9833\t\tTotal Points: 49 \n_________________________________________________________________________ \n",
        "Browse[2]> ",
        "res$TREGO[[1]]$loss",
        " [1] -0.9611111 -0.9552288 -0.9611111 -0.9555556 -0.9490196 -0.9660131 -0.9722222 -0.9722222\n [9] -0.9663399 -0.9500000 -0.9666667 -0.9601307 -0.9715686 -0.9607843\n",
        "Browse[2]> ",
        "res$TREGO[[1]]$errors",
        " [1] 0.05032680 0.01666667 0.01666667 0.01666667 0.01666667 0.01666667 0.01666667 0.01666667\n [9] 0.01666667 0.01666667 0.01666667 0.01666667 0.01666667 0.01666667\n",
        "Browse[2]> ",
        "res$EGO[[1]]$errors",
        " [1] 0.05032680 0.02810458 0.02222222 0.02222222 0.02222222 0.01666667 0.01666667 0.01666667\n [9] 0.01666667 0.01666667 0.01666667 0.01666667 0.01666667 0.01666667\n",
        "Browse[2]> ",
        "lapply(res, \\(x){",
        "+ ",
        "    vals <- sapply(x, getElement, 'errors')",
        "+ ",
        "    vals <- if(maximize) 1- vals else log10(vals)",
        "+ ",
        "    y <- data.frame(t(apply(vals, 1,",
        "+ ",
        "                            \\(y)c(mean = mean(y), sd = sd(y)))))",
        "+ ",
        "    y})",
        "$RSO\n        mean sd\n1  0.9496732 NA\n2  0.9545752 NA\n3  0.9545752 NA\n4  0.9545752 NA\n5  0.9545752 NA\n6  0.9718954 NA\n7  0.9774510 NA\n8  0.9830065 NA\n9  0.9888889 NA\n10 0.9888889 NA\n11 0.9888889 NA\n12 0.9888889 NA\n13 0.9888889 NA\n14 0.9888889 NA\n\n$EGO\n        mean sd\n1  0.9496732 NA\n2  0.9718954 NA\n3  0.9777778 NA\n4  0.9777778 NA\n5  0.9777778 NA\n6  0.9833333 NA\n7  0.9833333 NA\n8  0.9833333 NA\n9  0.9833333 NA\n10 0.9833333 NA\n11 0.9833333 NA\n12 0.9833333 NA\n13 0.9833333 NA\n14 0.9833333 NA\n\n$TREGO\n        mean sd",
        "\n1  0.9496732 NA\n2  0.9833333 NA\n3  0.9833333 NA\n4  0.9833333 NA\n5  0.9833333 NA\n6  0.9833333 NA\n7  0.9833333 NA\n8  0.9833333 NA\n9  0.9833333 NA\n10 0.9833333 NA\n11 0.9833333 NA\n12 0.9833333 NA\n13 0.9833333 NA\n14 0.9833333 NA\n\n",
        "Browse[2]> ",
        "  r <- lapply(res, \\(x){",
        "+ ",
        "    vals <- sapply(x, getElement, 'errors')",
        "+ ",
        "    vals <- if(maximize) 1- vals else log10(vals)",
        "+ ",
        "    y <- data.frame(t(apply(vals, 1,",
        "+ ",
        "                            \\(y)c(mean = mean(y), sd = sd(y)))))",
        "+ ",
        "    y})",
        "Browse[2]> ",
        "transform(array2DF(structure(r, dim = 3)),",
        "+ ",
        "          point = control$nsteps*seq(0,nrow(r[[1]])-1))",
        "Error in data.frame(list(Var1 = c(\"RSO\", \"RSO\", \"RSO\", \"RSO\", \"RSO\", \"RSO\",  : \n  arguments imply differing number of rows: 42, 0\n",
        "Browse[2]> ",
        "transform(array2DF(structure(r, dim = 3)),",
        "+ ",
        "          point = 3*seq(0,nrow(r[[1]])-1))",
        "      Var1      mean sd point\n1      RSO 0.9496732 NA     0\n1.1    RSO 0.9545752 NA     3\n1.2    RSO 0.9545752 NA     6\n1.3    RSO 0.9545752 NA     9\n1.4    RSO 0.9545752 NA    12\n1.5    RSO 0.9718954 NA    15\n1.6    RSO 0.9774510 NA    18\n1.7    RSO 0.9830065 NA    21\n1.8    RSO 0.9888889 NA    24\n1.9    RSO 0.9888889 NA    27\n1.10   RSO 0.9888889 NA    30\n1.11   RSO 0.9888889 NA    33\n1.12   RSO 0.9888889 NA    36\n1.13   RSO 0.9888889 NA    39\n2      EGO 0.9496732 NA     0\n2.1    EGO 0.9718954 NA     3\n2.2 ",
        "   EGO 0.9777778 NA     6\n2.3    EGO 0.9777778 NA     9\n2.4    EGO 0.9777778 NA    12\n2.5    EGO 0.9833333 NA    15\n2.6    EGO 0.9833333 NA    18\n2.7    EGO 0.9833333 NA    21\n2.8    EGO 0.9833333 NA    24\n2.9    EGO 0.9833333 NA    27\n2.10   EGO 0.9833333 NA    30\n2.11   EGO 0.9833333 NA    33\n2.12   EGO 0.9833333 NA    36\n2.13   EGO 0.9833333 NA    39\n3    TREGO 0.9496732 NA     0\n3.1  TREGO 0.9833333 NA     3\n3.2  TREGO 0.9833333 NA     6\n3.3  TREGO 0.9833333 NA     9\n3.4  TREGO 0.9833333 NA    12\n3.5  TREGO",
        " 0.9833333 NA    15\n3.6  TREGO 0.9833333 NA    18\n3.7  TREGO 0.9833333 NA    21\n3.8  TREGO 0.9833333 NA    24\n3.9  TREGO 0.9833333 NA    27\n3.10 TREGO 0.9833333 NA    30\n3.11 TREGO 0.9833333 NA    33\n3.12 TREGO 0.9833333 NA    36\n3.13 TREGO 0.9833333 NA    39\n",
        "Browse[2]> ",
        "Q",
        "\nRestarting R session...\n\n"
    ]
}